/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Pet Store
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  InternalServerError,
  NotFoundError,
  Pet,
  PetsCreatePetParams,
  PetsDeletePetParams,
  PetsGetPetParams,
  PetsListPetsParams,
  PetsUpdatePetParams,
  UnauthorizedError,
  ValidationError,
} from "../../models";

import { customFetch } from "../../custom/customFetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getPetsListPetsUrl = (params?: PetsListPetsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pets?${stringifiedParams}` : `/pets`;
};

export const petsListPets = async (
  params?: PetsListPetsParams,
  options?: RequestInit,
): Promise<Pet[]> => {
  return customFetch<Pet[]>(getPetsListPetsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getPetsListPetsQueryKey = (params?: PetsListPetsParams) => {
  return [`/pets`, ...(params ? [params] : [])] as const;
};

export const getPetsListPetsQueryOptions = <
  TData = Awaited<ReturnType<typeof petsListPets>>,
  TError = unknown,
>(
  params?: PetsListPetsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof petsListPets>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPetsListPetsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof petsListPets>>> = ({
    signal,
  }) => petsListPets(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof petsListPets>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PetsListPetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof petsListPets>>
>;
export type PetsListPetsQueryError = unknown;

export function usePetsListPets<
  TData = Awaited<ReturnType<typeof petsListPets>>,
  TError = unknown,
>(
  params?: PetsListPetsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof petsListPets>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPetsListPetsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPetsCreatePetUrl = (params?: PetsCreatePetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pets?${stringifiedParams}` : `/pets`;
};

export const petsCreatePet = async (
  pet: Pet,
  params?: PetsCreatePetParams,
  options?: RequestInit,
): Promise<Pet | Pet> => {
  return customFetch<Pet | Pet>(getPetsCreatePetUrl(params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pet),
  });
};

export const getPetsCreatePetMutationOptions = <
  TError = ValidationError | UnauthorizedError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof petsCreatePet>>,
    TError,
    { data: Pet; params?: PetsCreatePetParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof petsCreatePet>>,
  TError,
  { data: Pet; params?: PetsCreatePetParams },
  TContext
> => {
  const mutationKey = ["petsCreatePet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof petsCreatePet>>,
    { data: Pet; params?: PetsCreatePetParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return petsCreatePet(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PetsCreatePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof petsCreatePet>>
>;
export type PetsCreatePetMutationBody = Pet;
export type PetsCreatePetMutationError = ValidationError | UnauthorizedError;

export const usePetsCreatePet = <
  TError = ValidationError | UnauthorizedError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof petsCreatePet>>,
    TError,
    { data: Pet; params?: PetsCreatePetParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof petsCreatePet>>,
  TError,
  { data: Pet; params?: PetsCreatePetParams },
  TContext
> => {
  const mutationOptions = getPetsCreatePetMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getPetsGetPetUrl = (petId: number, params?: PetsGetPetParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}?${stringifiedParams}`
    : `/pets/${petId}`;
};

export const petsGetPet = async (
  petId: number,
  params?: PetsGetPetParams,
  options?: RequestInit,
): Promise<Pet> => {
  return customFetch<Pet>(getPetsGetPetUrl(petId, params), {
    ...options,
    method: "GET",
  });
};

export const getPetsGetPetQueryKey = (
  petId?: number,
  params?: PetsGetPetParams,
) => {
  return [`/pets/${petId}`, ...(params ? [params] : [])] as const;
};

export const getPetsGetPetQueryOptions = <
  TData = Awaited<ReturnType<typeof petsGetPet>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: PetsGetPetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof petsGetPet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPetsGetPetQueryKey(petId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof petsGetPet>>> = ({
    signal,
  }) => petsGetPet(petId, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!petId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof petsGetPet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PetsGetPetQueryResult = NonNullable<
  Awaited<ReturnType<typeof petsGetPet>>
>;
export type PetsGetPetQueryError = NotFoundError;

export function usePetsGetPet<
  TData = Awaited<ReturnType<typeof petsGetPet>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: PetsGetPetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof petsGetPet>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPetsGetPetQueryOptions(petId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPetsUpdatePetUrl = (
  petId: number,
  params?: PetsUpdatePetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}?${stringifiedParams}`
    : `/pets/${petId}`;
};

export const petsUpdatePet = async (
  petId: number,
  pet: Pet,
  params?: PetsUpdatePetParams,
  options?: RequestInit,
): Promise<Pet> => {
  return customFetch<Pet>(getPetsUpdatePetUrl(petId, params), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pet),
  });
};

export const getPetsUpdatePetMutationOptions = <
  TError =
    | ValidationError
    | UnauthorizedError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof petsUpdatePet>>,
    TError,
    { petId: number; data: Pet; params?: PetsUpdatePetParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof petsUpdatePet>>,
  TError,
  { petId: number; data: Pet; params?: PetsUpdatePetParams },
  TContext
> => {
  const mutationKey = ["petsUpdatePet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof petsUpdatePet>>,
    { petId: number; data: Pet; params?: PetsUpdatePetParams }
  > = (props) => {
    const { petId, data, params } = props ?? {};

    return petsUpdatePet(petId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PetsUpdatePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof petsUpdatePet>>
>;
export type PetsUpdatePetMutationBody = Pet;
export type PetsUpdatePetMutationError =
  | ValidationError
  | UnauthorizedError
  | NotFoundError
  | InternalServerError;

export const usePetsUpdatePet = <
  TError =
    | ValidationError
    | UnauthorizedError
    | NotFoundError
    | InternalServerError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof petsUpdatePet>>,
    TError,
    { petId: number; data: Pet; params?: PetsUpdatePetParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof petsUpdatePet>>,
  TError,
  { petId: number; data: Pet; params?: PetsUpdatePetParams },
  TContext
> => {
  const mutationOptions = getPetsUpdatePetMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getPetsDeletePetUrl = (
  petId: number,
  params?: PetsDeletePetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}?${stringifiedParams}`
    : `/pets/${petId}`;
};

export const petsDeletePet = async (
  petId: number,
  params?: PetsDeletePetParams,
  options?: RequestInit,
): Promise<null> => {
  return customFetch<null>(getPetsDeletePetUrl(petId, params), {
    ...options,
    method: "DELETE",
  });
};

export const getPetsDeletePetMutationOptions = <
  TError = UnauthorizedError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof petsDeletePet>>,
    TError,
    { petId: number; params?: PetsDeletePetParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof petsDeletePet>>,
  TError,
  { petId: number; params?: PetsDeletePetParams },
  TContext
> => {
  const mutationKey = ["petsDeletePet"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof petsDeletePet>>,
    { petId: number; params?: PetsDeletePetParams }
  > = (props) => {
    const { petId, params } = props ?? {};

    return petsDeletePet(petId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PetsDeletePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof petsDeletePet>>
>;

export type PetsDeletePetMutationError = UnauthorizedError;

export const usePetsDeletePet = <
  TError = UnauthorizedError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof petsDeletePet>>,
    TError,
    { petId: number; params?: PetsDeletePetParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof petsDeletePet>>,
  TError,
  { petId: number; params?: PetsDeletePetParams },
  TContext
> => {
  const mutationOptions = getPetsDeletePetMutationOptions(options);

  return useMutation(mutationOptions);
};
