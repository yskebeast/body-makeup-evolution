/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Pet Store
 * OpenAPI spec version: 2.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { PetType } from "../../models";
import type { Pet } from "../../models";

export const getPetsListPetsResponseMock = (): Pet[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 1, max: 20 } }),
    age: faker.number.int({ min: 0, max: 100, multipleOf: undefined }),
    kind: faker.helpers.arrayElement(Object.values(PetType)),
  }));

export const getPetsCreatePetResponseMock = (
  overrideResponse: Partial<Pet | Pet> = {},
): Pet | Pet =>
  faker.helpers.arrayElement([
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 1, max: 20 } }),
      age: faker.number.int({ min: 0, max: 100, multipleOf: undefined }),
      kind: faker.helpers.arrayElement(Object.values(PetType)),
      ...overrideResponse,
    },
    {
      id: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
      name: faker.string.alpha({ length: { min: 1, max: 20 } }),
      age: faker.number.int({ min: 0, max: 100, multipleOf: undefined }),
      kind: faker.helpers.arrayElement(Object.values(PetType)),
      ...overrideResponse,
    },
  ]);

export const getPetsGetPetResponseMock = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 1, max: 20 } }),
  age: faker.number.int({ min: 0, max: 100, multipleOf: undefined }),
  kind: faker.helpers.arrayElement(Object.values(PetType)),
  ...overrideResponse,
});

export const getPetsUpdatePetResponseMock = (
  overrideResponse: Partial<Pet> = {},
): Pet => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 1, max: 20 } }),
  age: faker.number.int({ min: 0, max: 100, multipleOf: undefined }),
  kind: faker.helpers.arrayElement(Object.values(PetType)),
  ...overrideResponse,
});

export const getPetsListPetsMockHandler = (
  overrideResponse?:
    | Pet[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet[]> | Pet[]),
) => {
  return http.get("*/pets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPetsListPetsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPetsCreatePetMockHandler = (
  overrideResponse?:
    | Pet
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Pet | Pet> | Pet | Pet),
) => {
  return http.post("*/pets", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPetsCreatePetResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPetsGetPetMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.get("*/pets/:petId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPetsGetPetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPetsUpdatePetMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Pet> | Pet),
) => {
  return http.put("*/pets/:petId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPetsUpdatePetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPetsDeletePetMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/pets/:petId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getPetsMock = () => [
  getPetsListPetsMockHandler(),
  getPetsCreatePetMockHandler(),
  getPetsGetPetMockHandler(),
  getPetsUpdatePetMockHandler(),
  getPetsDeletePetMockHandler(),
];
