/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Pet Store
 * OpenAPI spec version: 2.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  NotFoundError,
  Toy,
  ToysCreateToyParams,
  ToysDeleteToyParams,
  ToysListToysParams,
  ToysUpdateToyParams,
  UnauthorizedError,
  ValidationError,
} from "../../models";

import { customFetch } from "../../custom/customFetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getToysListToysUrl = (
  petId: number,
  params?: ToysListToysParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}/toys?${stringifiedParams}`
    : `/pets/${petId}/toys`;
};

export const toysListToys = async (
  petId: number,
  params?: ToysListToysParams,
  options?: RequestInit,
): Promise<Toy[]> => {
  return customFetch<Toy[]>(getToysListToysUrl(petId, params), {
    ...options,
    method: "GET",
  });
};

export const getToysListToysQueryKey = (
  petId?: number,
  params?: ToysListToysParams,
) => {
  return [`/pets/${petId}/toys`, ...(params ? [params] : [])] as const;
};

export const getToysListToysQueryOptions = <
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof toysListToys>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToysListToysQueryKey(petId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof toysListToys>>> = ({
    signal,
  }) => toysListToys(petId, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!petId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof toysListToys>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToysListToysQueryResult = NonNullable<
  Awaited<ReturnType<typeof toysListToys>>
>;
export type ToysListToysQueryError = NotFoundError;

export function useToysListToys<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params: undefined | ToysListToysParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof toysListToys>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof toysListToys>>,
          TError,
          Awaited<ReturnType<typeof toysListToys>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToysListToys<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof toysListToys>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof toysListToys>>,
          TError,
          Awaited<ReturnType<typeof toysListToys>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToysListToys<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof toysListToys>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useToysListToys<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof toysListToys>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToysListToysQueryOptions(petId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchToysListToysQuery = async <
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  queryClient: QueryClient,
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof toysListToys>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getToysListToysQueryOptions(petId, params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getToysListToysSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof toysListToys>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getToysListToysQueryKey(petId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof toysListToys>>> = ({
    signal,
  }) => toysListToys(petId, params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof toysListToys>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ToysListToysSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof toysListToys>>
>;
export type ToysListToysSuspenseQueryError = NotFoundError;

export function useToysListToysSuspense<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params: undefined | ToysListToysParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof toysListToys>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToysListToysSuspense<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof toysListToys>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useToysListToysSuspense<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof toysListToys>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useToysListToysSuspense<
  TData = Awaited<ReturnType<typeof toysListToys>>,
  TError = NotFoundError,
>(
  petId: number,
  params?: ToysListToysParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof toysListToys>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getToysListToysSuspenseQueryOptions(
    petId,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getToysCreateToyUrl = (
  petId: number,
  params?: ToysCreateToyParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}/toys?${stringifiedParams}`
    : `/pets/${petId}/toys`;
};

export const toysCreateToy = async (
  petId: number,
  toy: Toy,
  params?: ToysCreateToyParams,
  options?: RequestInit,
): Promise<Toy> => {
  return customFetch<Toy>(getToysCreateToyUrl(petId, params), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(toy),
  });
};

export const getToysCreateToyMutationOptions = <
  TError = ValidationError | UnauthorizedError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toysCreateToy>>,
    TError,
    { petId: number; data: Toy; params?: ToysCreateToyParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toysCreateToy>>,
  TError,
  { petId: number; data: Toy; params?: ToysCreateToyParams },
  TContext
> => {
  const mutationKey = ["toysCreateToy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toysCreateToy>>,
    { petId: number; data: Toy; params?: ToysCreateToyParams }
  > = (props) => {
    const { petId, data, params } = props ?? {};

    return toysCreateToy(petId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToysCreateToyMutationResult = NonNullable<
  Awaited<ReturnType<typeof toysCreateToy>>
>;
export type ToysCreateToyMutationBody = Toy;
export type ToysCreateToyMutationError = ValidationError | UnauthorizedError;

export const useToysCreateToy = <
  TError = ValidationError | UnauthorizedError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toysCreateToy>>,
      TError,
      { petId: number; data: Toy; params?: ToysCreateToyParams },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toysCreateToy>>,
  TError,
  { petId: number; data: Toy; params?: ToysCreateToyParams },
  TContext
> => {
  const mutationOptions = getToysCreateToyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getToysUpdateToyUrl = (
  petId: number,
  toyId: number,
  params?: ToysUpdateToyParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}/toys/${toyId}?${stringifiedParams}`
    : `/pets/${petId}/toys/${toyId}`;
};

export const toysUpdateToy = async (
  petId: number,
  toyId: number,
  toy: Toy,
  params?: ToysUpdateToyParams,
  options?: RequestInit,
): Promise<Toy> => {
  return customFetch<Toy>(getToysUpdateToyUrl(petId, toyId, params), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(toy),
  });
};

export const getToysUpdateToyMutationOptions = <
  TError = ValidationError | UnauthorizedError | NotFoundError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toysUpdateToy>>,
    TError,
    { petId: number; toyId: number; data: Toy; params?: ToysUpdateToyParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toysUpdateToy>>,
  TError,
  { petId: number; toyId: number; data: Toy; params?: ToysUpdateToyParams },
  TContext
> => {
  const mutationKey = ["toysUpdateToy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toysUpdateToy>>,
    { petId: number; toyId: number; data: Toy; params?: ToysUpdateToyParams }
  > = (props) => {
    const { petId, toyId, data, params } = props ?? {};

    return toysUpdateToy(petId, toyId, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToysUpdateToyMutationResult = NonNullable<
  Awaited<ReturnType<typeof toysUpdateToy>>
>;
export type ToysUpdateToyMutationBody = Toy;
export type ToysUpdateToyMutationError =
  | ValidationError
  | UnauthorizedError
  | NotFoundError;

export const useToysUpdateToy = <
  TError = ValidationError | UnauthorizedError | NotFoundError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toysUpdateToy>>,
      TError,
      { petId: number; toyId: number; data: Toy; params?: ToysUpdateToyParams },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toysUpdateToy>>,
  TError,
  { petId: number; toyId: number; data: Toy; params?: ToysUpdateToyParams },
  TContext
> => {
  const mutationOptions = getToysUpdateToyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getToysDeleteToyUrl = (
  petId: number,
  toyId: number,
  params?: ToysDeleteToyParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/pets/${petId}/toys/${toyId}?${stringifiedParams}`
    : `/pets/${petId}/toys/${toyId}`;
};

export const toysDeleteToy = async (
  petId: number,
  toyId: number,
  params?: ToysDeleteToyParams,
  options?: RequestInit,
): Promise<null> => {
  return customFetch<null>(getToysDeleteToyUrl(petId, toyId, params), {
    ...options,
    method: "DELETE",
  });
};

export const getToysDeleteToyMutationOptions = <
  TError = UnauthorizedError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toysDeleteToy>>,
    TError,
    { petId: number; toyId: number; params?: ToysDeleteToyParams },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toysDeleteToy>>,
  TError,
  { petId: number; toyId: number; params?: ToysDeleteToyParams },
  TContext
> => {
  const mutationKey = ["toysDeleteToy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toysDeleteToy>>,
    { petId: number; toyId: number; params?: ToysDeleteToyParams }
  > = (props) => {
    const { petId, toyId, params } = props ?? {};

    return toysDeleteToy(petId, toyId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToysDeleteToyMutationResult = NonNullable<
  Awaited<ReturnType<typeof toysDeleteToy>>
>;

export type ToysDeleteToyMutationError = UnauthorizedError;

export const useToysDeleteToy = <
  TError = UnauthorizedError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toysDeleteToy>>,
      TError,
      { petId: number; toyId: number; params?: ToysDeleteToyParams },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toysDeleteToy>>,
  TError,
  { petId: number; toyId: number; params?: ToysDeleteToyParams },
  TContext
> => {
  const mutationOptions = getToysDeleteToyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
