/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Pet Store
 * OpenAPI spec version: 2.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { Toy } from "../../models";

export const getToysListToysResponseMock = (): Toy[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  }));

export const getToysCreateToyResponseMock = (
  overrideResponse: Partial<Toy> = {},
): Toy => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getToysUpdateToyResponseMock = (
  overrideResponse: Partial<Toy> = {},
): Toy => ({
  id: faker.number.int({
    min: undefined,
    max: undefined,
    multipleOf: undefined,
  }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getToysListToysMockHandler = (
  overrideResponse?:
    | Toy[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Toy[]> | Toy[]),
) => {
  return http.get("*/pets/:petId/toys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getToysListToysResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getToysCreateToyMockHandler = (
  overrideResponse?:
    | Toy
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Toy> | Toy),
) => {
  return http.post("*/pets/:petId/toys", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getToysCreateToyResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getToysUpdateToyMockHandler = (
  overrideResponse?:
    | Toy
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<Toy> | Toy),
) => {
  return http.put("*/pets/:petId/toys/:toyId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getToysUpdateToyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getToysDeleteToyMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/pets/:petId/toys/:toyId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getPetsToysMock = () => [
  getToysListToysMockHandler(),
  getToysCreateToyMockHandler(),
  getToysUpdateToyMockHandler(),
  getToysDeleteToyMockHandler(),
];
